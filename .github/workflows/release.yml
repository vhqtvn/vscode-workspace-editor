name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-cli:
    name: Build CLI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: vscode-workspaces-editor
            asset_name: vscode-workspaces-editor-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: vscode-workspaces-editor.exe
            asset_name: vscode-workspaces-editor-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: vscode-workspaces-editor
            asset_name: vscode-workspaces-editor-macos-amd64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            build-essential \
            libglib2.0-dev \
            libgtk-3-dev

      - name: Build CLI
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p artifacts
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "artifacts/${{ matrix.asset_name }}"
          else
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "artifacts/${{ matrix.asset_name }}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-${{ matrix.target }}
          path: artifacts/${{ matrix.asset_name }}

  build-gui:
    name: Build GUI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            target: linux
          - os: macos-latest
            target: macos
          - os: windows-latest
            target: windows

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            pkg-config \
            build-essential \
            libglib2.0-dev

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Install frontend dependencies
        run: cd src-ui && pnpm install

      - name: Build frontend
        run: cd src-ui && pnpm build

      - name: Install Tauri CLI
        run: cargo install tauri-cli

      - name: Build Tauri app
        run: cargo tauri build

      - name: Prepare artifacts (Linux)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          mkdir -p artifacts
          cp "src-tauri/target/release/bundle/appimage/vscode-workspaces-editor-gui_*.AppImage" artifacts/
          cp "src-tauri/target/release/bundle/deb/vscode-workspaces-editor-gui_*.deb" artifacts/

      - name: Prepare artifacts (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p artifacts
          cp -r "src-tauri/target/release/bundle/macos/vscode-workspaces-editor-gui.app" artifacts/
          cd artifacts
          zip -r "vscode-workspaces-editor-gui-macos.zip" "vscode-workspaces-editor-gui.app"

      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifacts
          copy "src-tauri\target\release\bundle\msi\*.msi" artifacts\

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gui-${{ matrix.target }}
          path: artifacts/*

  create-release:
    name: Create Release
    needs: [build-cli, build-gui]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: true
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 