name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-cli:
    name: Build CLI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: vscode-workspaces-editor
            asset_name: vscode-workspaces-editor-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: vscode-workspaces-editor.exe
            asset_name: vscode-workspaces-editor-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: vscode-workspaces-editor
            asset_name: vscode-workspaces-editor-macos-amd64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: vscode-workspaces-editor.exe
            asset_name: vscode-workspaces-editor-windows-arm64.exe
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: vscode-workspaces-editor
            asset_name: vscode-workspaces-editor-macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            pkg-config \
            build-essential \
            libglib2.0-dev \
            libsoup-3.0-dev

      - name: Build CLI
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p artifacts
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "artifacts/${{ matrix.asset_name }}"
          else
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "artifacts/${{ matrix.asset_name }}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-${{ matrix.target }}
          path: artifacts/${{ matrix.asset_name }}

  build-gui:
    name: Build GUI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # x86_64 builds
          - os: ubuntu-latest
            target: linux
            arch: x64
          - os: macos-latest
            target: macos
            arch: x64
          - os: windows-latest
            target: windows
            arch: x64
          
          # ARM64 builds (except Linux)
          - os: macos-latest
            target: macos
            arch: arm64
          - os: windows-latest
            target: windows
            arch: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Set Rust target
        id: set-rust-target
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.arch }}" == "arm64" ]]; then
            echo "RUST_TARGET=aarch64-apple-darwin" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.arch }}" == "x64" ]]; then
            echo "RUST_TARGET=x86_64-apple-darwin" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.arch }}" == "arm64" ]]; then
            echo "RUST_TARGET=aarch64-pc-windows-msvc" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.arch }}" == "x64" ]]; then
            echo "RUST_TARGET=x86_64-pc-windows-msvc" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.arch }}" == "x64" ]]; then
            echo "RUST_TARGET=x86_64-unknown-linux-gnu" >> $GITHUB_OUTPUT
          else
            # This should not happen, but just in case
            echo "RUST_TARGET=" >> $GITHUB_OUTPUT
          fi

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ steps.set-rust-target.outputs.RUST_TARGET != '' && steps.set-rust-target.outputs.RUST_TARGET || '' }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            pkg-config \
            build-essential \
            libglib2.0-dev \
            libsoup-3.0-dev

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Install frontend dependencies
        shell: bash
        run: |
          cd src-ui
          pnpm install

      - name: Build frontend
        shell: bash
        run: |
          cd src-ui
          pnpm build
          cd ..

      - name: Install Tauri CLI
        run: cargo install tauri-cli

      - name: Build Tauri app for GitHub release (release)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: |
          # Debug output the target we are using
          echo "Building with target: ${{ steps.set-rust-target.outputs.RUST_TARGET }}"
          
          # Build the Tauri app
          cargo tauri build --target ${{ steps.set-rust-target.outputs.RUST_TARGET }}

      - name: Build Tauri app (debug)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        env:
          CARGO_BUILD_TARGET: ${{ steps.set-rust-target.outputs.RUST_TARGET }}
        run: |
          # Debug output the target we are using
          echo "Building with target: $CARGO_BUILD_TARGET"
          
          # Build the Tauri app
          cargo tauri build --target $CARGO_BUILD_TARGET

      - name: Prepare artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p artifacts
          cp target/${{ steps.set-rust-target.outputs.RUST_TARGET }}/release/bundle/*/vscode-workspaces-editor-gui_*.{deb,AppImage} artifacts/vscode-workspaces-editor-gui-linux-${{ matrix.arch }}.{deb,AppImage} 2>/dev/null || true
          cp target/${{ steps.set-rust-target.outputs.RUST_TARGET }}/release/bundle/*/vscode-workspaces-editor-gui-*.rpm artifacts/vscode-workspaces-editor-gui-linux-${{ matrix.arch }}.rpm 2>/dev/null || true

      - name: Prepare artifacts (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p artifacts
          cp -r "target/${{ steps.set-rust-target.outputs.RUST_TARGET }}/release/bundle/macos/"*.app artifacts/vscode-workspaces-editor-gui-macos-${{ matrix.arch }}.app
          cp -r "target/${{ steps.set-rust-target.outputs.RUST_TARGET }}/release/bundle/dmg/"*.dmg artifacts/vscode-workspaces-editor-gui-macos-${{ matrix.arch }}.dmg
          cd artifacts
          zip -r "vscode-workspaces-editor-gui-macos-${{ matrix.arch }}.zip" *.app
          rm -rf *.app

      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifacts
          copy "target\${{ steps.set-rust-target.outputs.RUST_TARGET }}\release\bundle\msi\*.msi" artifacts\vscode-workspaces-editor-gui-windows-${{ matrix.arch }}.msi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gui-${{ matrix.target }}-${{ matrix.arch }}
          path: artifacts/*

  create-release:
    name: Create Release
    needs: [build-cli, build-gui]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 